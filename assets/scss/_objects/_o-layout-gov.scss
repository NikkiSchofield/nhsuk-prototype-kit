// ==========================================================================
// MEDIA QUERY HELPERS
// ==========================================================================
$tablet-breakpoint: 641px !default;
$desktop-breakpoint: 769px !default;

@mixin media($size: false, $max-width: false, $min-width: false) {
  @if $size == desktop {
    @media (min-width: $desktop-breakpoint) {
      @content;
    }
  }
  @else if $size == tablet {
    @media (min-width: $tablet-breakpoint) {
      @content;
    }
  }
  @else if $size == mobile {
    @media (max-width: $tablet-breakpoint - 1px) {
      @content;
    }
  }
  @else if $max-width != false {
    @media (max-width: $max-width) {
      @content;
    }
  }
  @else if $min-width != false {
    @media (min-width: $min-width) {
      @content;
    }
  }
  @else {
    @media (min-width: $size) {
      @content
    }
  }
}

// ==========================================================================
// An extendable selector to outdent to the full page-width
// So that you can create elements that take up the gutters on the side of the
// page and butt up to the edge of the browser on smaller screens (rather than
// leaving a gutter at the edge of the page).
//
// Usage:
//
// .hero-image-container {
//   @extend %outdent-to-full-width;
// }
%outdent-to-full-width {
  margin-left: -$--layout-gutter-half;
  margin-right: -$--layout-gutter-half;
  @include media(tablet) {
    margin-left: -$--layout-gutter;
    margin-right: -$--layout-gutter;
  }
}

.hero {
  @extend %outdent-to-full-width;
  padding: $--layout-gutter-half;
  @include media(tablet) {
    padding: $--layout-gutter;
  }
  background-color: green;
}

// A mixin for a grid column
// Creates a cross browser grid column with a standardised gutter between the
// columns. Widths should be defined as fractions of the full desktop width
// they want to fill. By default they break to become full width at tablet size
// but that can be configured to be desktop using the `$full-width` argument.
//
// Usage:
//
//   .column-quarter {
//     @include grid-column( 1/4 );
//   }
//   .column-half {
//     @include grid-column( 1/2 );
//   }
//   .column-desktop-third {
//     @include grid-column( 1/3, $full-width: desktop );
//   }
@mixin grid-column($width, $full-width: tablet, $float: left) {
  @include media($full-width) {
    float: $float;
    width: percentage($width);
  }
  padding: 0 $--layout-gutter-half;
  box-sizing: border-box;
}

// Content
// ==========================================================================
// Allow an ID here, this is useful as it matches the GOV.UK template skiplink
// scss-lint:disable IdSelector

.o-site-width {
  max-width: $--layout-site-width;
  margin: 0 $--layout-gutter-half;
  @include media(tablet) {
    margin: 0 $--layout-gutter;
  }
  @include media($min-width: ($--layout-site-width + $--layout-gutter * 2)) {
    margin: 0 auto;
  }
  &:after {
    content: "";
    display: block;
    clear: both;
  }
}

// Grid layout
// ==========================================================================
// Usage:
// For two equal columns
// <div class="grid-row">
//   <div class="column-one-half">
//
//   </div>
//   <div class="column-one-half">
//
//   </div>
// </div>
// Use .grid-row to define a row for grid columns to sit in

.grid-row {
  margin: 0 (-$--layout-gutter-half);

  &:after {
    content: "";
    display: block;
    clear: both;
  }
}
// Use .grid-column to create a grid column with 15px gutter
// By default grid columns break to become full width at tablet size

.column-one-quarter,
.column-quarter {
  @include grid-column(1 / 4);
}

.column-half,
.column-one-half {
  @include grid-column(1 / 2);
}

.column-one-third,
.column-third {
  @include grid-column(1 / 3);
}

.column-two-thirds {
  @include grid-column(2 / 3);
}

.column-full {
  @include grid-column(1);
}
